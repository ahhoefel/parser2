func(func) @ :1:1:4
identifierGrammar(main) @ :1:6:4
lparen(() @ :1:10:1
rparen()) @ :1:11:1
lbrace({) @ :1:13:1
var(var) @ :2:5:3
identifierGrammar(x) @ :2:9:1
int(int) @ :2:11:3
equals(=) @ :2:15:1
numberGrammar(3) @ :2:17:1
for(for) @ :3:5:3
identifierGrammar(x) @ :3:9:1
lessThan(<) @ :3:11:1
numberGrammar(10) @ :3:13:2
lbrace({) @ :3:16:1
identifierGrammar(x) @ :4:9:1
equals(=) @ :4:11:1
identifierGrammar(x) @ :4:13:1
plus(+) @ :4:15:1
numberGrammar(1) @ :4:17:1
rbrace(}) @ :5:5:1
if(if) @ :6:5:2
identifierGrammar(x) @ :6:8:1
forwardSlash(/) @ :6:10:1
numberGrammar(2) @ :6:12:1
doubleEquals(=) @ :6:14:1
numberGrammar(0) @ :6:17:1
lbrace({) @ :6:19:1
identifierGrammar(foo) @ :7:9:3
lparen(() @ :7:12:1
identifierGrammar(x) @ :7:13:1
rparen()) @ :7:14:1
rbrace(}) @ :8:5:1
rbrace(}) @ :9:1:1
